@page "/transactions"

@using Domain.Models
@using Blazor.FileReader
@using System.Net.Http
@using BlazorApp.Services
@using BlazorApp.Models
@inject IFileReaderService fileReaderService
@inject HttpClient HttpClient
@inject TransactionService service
@inject AccountService accountService

<h1>Transactions</h1>

Import: 
<select id="Account" @bind="accountId">
    @foreach (var account in accounts)
    {
        <option value=@account.Id>@account.Name</option>
    }
</select>
<input type="file" multiple @ref=inputElement />
<button @onclick="UploadFiles">Upload</button>

<br /><pre>@debug</pre>

Filters: 

<select id="Classification" @bind="filter.classificationFilter">
    @foreach (var classification in classifications)
    {
        <option value=@classification>@classification</option>
    }
</select>

<button @onclick="FilterSearch">Search</button>


<GenericGridLoader Entities="transactions">
    <PopulatedFragment>
        <table class="table" border="1" cellpadding="15">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Date</th>
                    <th>Description</th>
                    <th>Classificaion</th>
                    @*<th>Bank</th>*@
                    <th>Account</th>
                    <th>Transaction Type</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entity in transactions)
                {
                    <tr>
                        <td>@entity.Id</td>
                        <td>@entity.Date</td>
                        <td>@entity.Description</td>
                        <td>@entity.Classification</td>
                        @*<td>@entity.Bank.Name</td>*@
                        <td>@entity.Account.Name</td>
                        <td>@entity.TransactionType</td>
                        <td>@entity.Amount</td>
                    </tr>
                }
            </tbody>
        </table>
    </PopulatedFragment>
</GenericGridLoader>    

<label bind="nav">Page @currentPage/@numPages</label>
<label bind="nav">Total results: @count</label>


@if (skip + top > top)
{
    <button @onclick=Previous> ← </button>
}

@if (top + skip < count)
{
    <button @onclick=Next> → </button>
}

@code {
    List<Account> accounts;
    List<Transaction> transactions;

    List<string> classifications;
    (string filterName, string classificationFilter) filter;

    long accountId = 0;

    int skip = 0;
    int top = 10;
    int count = 0;
    int numPages => (count / top) + 1;
    int currentPage => (skip / top) + 1;

    protected override async Task OnInitializedAsync()
    {
        UpdateAccounts();
        UpdateTransactions(true);
        classifications = await service.GetClassificationsAsync();
    }

    async void UpdateAccounts()
    {
        var res = await accountService.GetEntitiesAsync();
        accounts = res.Entities;
    }

    void UpdateTransactions(bool updateCount = false)
    {
        var queryBuilder = service.GetQueryBuilder();

        queryBuilder.Top = top;
        queryBuilder.Skip = skip;
        queryBuilder.Filter = filter;

        var res = service.GetEntitiesAsync(queryBuilder).Result;

        transactions = res.Entities;

        if(updateCount)
            count = res.Count;
    }

    void FilterSearch()
    {
        skip = 0;
        filter.filterName = nameof(Transaction.Classification);
        UpdateTransactions(true);
    }

    void Next()
    {
        skip += top;
        UpdateTransactions();
    }

    void Previous()
    {
        skip -= top;
        UpdateTransactions();
    }

    string debug;
    ElementReference inputElement;
    IFileReaderRef fileReaderReference;

    protected override void OnAfterRender(bool isFirstRender)
    {
        fileReaderReference = fileReaderService.CreateReference(inputElement);
    }

    public async Task UploadFiles()
    {
        var multipartFormDataContent = new MultipartFormDataContent();

        multipartFormDataContent.Headers.Add("AccountId", accountId.ToString());

        foreach (var file in await fileReaderReference.EnumerateFilesAsync())
        {
            multipartFormDataContent.Add(
                new StreamContent(await file.OpenReadAsync(), 8192),
                "files",
                (await file.ReadFileInfoAsync()).Name);
        }

        var res = await HttpClient.PostAsync(requestUri: $"{service.ApiUrl}",
                content: multipartFormDataContent);
        debug = await res.Content.ReadAsStringAsync();

        UpdateTransactions(true);
    }
}
