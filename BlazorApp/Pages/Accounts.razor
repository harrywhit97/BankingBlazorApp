@page "/accounts"

@using BankingCore.Services
@using Domain.Models
@using Domain.Enums
@inject AccountService service

<h1>Accounts</h1>

@if (service == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@formEntity" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="Account Name" @bind-Value="formEntity.Name" />
        <select @bind="formEntity.BankName">
            @foreach (var bank in service.GetBankList())
            {
                <option value="@bank.Name">@bank.Name</option>
            }
        </select>
        <select @bind="formEntity.BankName">
            @foreach (var accountType in Enum.GetValues(typeof(TransactionType)).Cast<TransactionType>())
            {
                <option value="@accountType">@accountType</option>
            }
        </select>
        <button type="submit">Submit</button>
    </EditForm>

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Account Name</th>
                <th>Bank Name</th>
                <th>Account Type</th>
                <th>Balance</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in service.GetAll())
            {
                <tr>
                    <td>@entity.Id</td>
                    <td>@entity.Name</td>
                    <td>@entity.BankName</td>
                    <td>@entity.AccountType</td>
                    <td>@entity.Balance</td>
                    <button class="btn btn-primary" @onclick="@(e => service.Remove(entity))">Remove</button>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    Domain.Models.Account formEntity = new Domain.Models.Account();

    private void HandleValidSubmit()
    {

        service.Add(service.Clone(formEntity));
    }
}
